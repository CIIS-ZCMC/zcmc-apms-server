<?php

namespace App\Helpers;

class FileUploadCheckForMalwareAttack
{
    
    // Allowed file types
    private $allowedFileTypes = ['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'gif'];

    // Maximum file size in bytes (e.g., 5MB)
    private $maxFileSize = 5 * 1024 * 1024;

    /**
     * Check if the uploaded file is safe to process.
     *
     * @param array $file The $_FILES array element for the uploaded file.
     * @return bool True if the file is safe, false otherwise.
     */
    public function isFileSafe(array $file): bool
    {
        // Check if the file was uploaded successfully
        if ($file['error'] !== UPLOAD_ERR_OK) {
            throw new \Exception("File upload error: " . $file['error']);
        }

        // Validate file type
        if (!$this->isFileTypeAllowed($file)) {
            throw new \Exception("File type not allowed.");
        }

        // Validate file size
        if (!$this->isFileSizeValid($file)) {
            throw new \Exception("File size exceeds the maximum allowed size.");
        }

        // Scan file for malware
        if (!$this->scanFileForMalware($file)) {
            throw new \Exception("File is potentially malicious.");
        }

        return true;
    }

    /**
     * Check if the file type is allowed.
     *
     * @param array $file The $_FILES array element for the uploaded file.
     * @return bool True if the file type is allowed, false otherwise.
     */
    private function isFileTypeAllowed(array $file): bool
    {
        $fileExtension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
        return in_array($fileExtension, $this->allowedFileTypes);
    }

    /**
     * Check if the file size is within the allowed limit.
     *
     * @param array $file The $_FILES array element for the uploaded file.
     * @return bool True if the file size is valid, false otherwise.
     */
    private function isFileSizeValid(array $file): bool
    {
        return $file['size'] <= $this->maxFileSize;
    }

    /**
     * Scan the file for malware using an external service or library.
     *
     * @param array $file The $_FILES array element for the uploaded file.
     * @return bool True if the file is clean, false if malware is detected.
     */
    private function scanFileForMalware(array $file): bool
    {
        // Example: Using ClamAV to scan the file
        // Ensure ClamAV is installed and configured on your server
        $clamscanResult = shell_exec("clamscan --stdout " . escapeshellarg($file['tmp_name']));

        // Check if the scan result indicates malware
        if (strpos($clamscanResult, 'Infected files: 0') === false) {
            return false; // Malware detected
        }

        return true; // File is clean
    }
}